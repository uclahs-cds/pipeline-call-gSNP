includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/csv/csv_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
// includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/retry/retry.config"
includeConfig "/hot/code/yashpatel/GitHub/uclahs-cds/pipeline-Nextflow-config/yashpatel-generalized-resource-handler/config/resource_handler/resource_handler.config"

methods {
    set_output_dirs = {
        def output_dir_root = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.patient_id}"
        params.output_dir_base = "${output_dir_root}/${params.docker_image_gatk.split("/")[1].replace(':', '-').toUpperCase()}"

        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.log_output_dir = "${output_dir_root}/log-${manifest.name}-${manifest.version}-${date}"
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }

    set_process = {
        process.cache = params.cache_intermediate_pipeline_steps
    }

    detect_mode = {
        // Detect whether job is for targeted sample
        params.is_targeted = (params.intervals) ? true : false
        params.is_NT_paired = (params.input.BAM.containsKey('normal') && params.input.BAM.containsKey('tumor'))
    }

    set_ids_from_bams = {
        params.samples_to_process = [] as Set
        params.input.BAM.each { k, v ->
            v.each { bam_path ->
                def bam_header = bam_parser.parse_bam_header(bam_path)
                def sm_tags = bam_header['read_group'].collect{ it['SM'] }.unique()

                if (sm_tags.size() != 1) {
                    throw new Exception("${bam_path} contains multiple samples! Please run pipeline with single sample BAMs.")
                }

                params.samples_to_process.add(['id': sm_tags[0], 'path': bam_path, 'sample_type': k])
            }
        }
    }

    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    setup = {
        methods.set_env()
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        resource_handler.handle_resources("${projectDir}/config/resources.json")
        // methods.set_resources_allocation()
        // methods.modify_base_allocations()
        methods.set_ids_from_bams()
        methods.set_output_dirs()
        methods.set_pipeline_logs()
        methods.set_process()
        methods.detect_mode()
        // retry.setup_retry()
        methods.setup_docker_cpus()
    }
}
